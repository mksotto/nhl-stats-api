import {ContentEnUsPlayersGet} from "../types/domain/nhl-api/contentEnUsPlayersGet";
import {PlayerPlayerIdLandingGet} from "../types/domain/nhl-api/playerIdLandingGet";
import {PlayerAdvanced} from "../types/domain/nhl-stats";
import {makePlusMinus, makeRoundValue, makeSavePctg, makeSeasonString} from "./utils/utils";

export const makePlayersId = (
    player: PlayerPlayerIdLandingGet,
    d: ContentEnUsPlayersGet
): PlayerAdvanced => ({
    id: player.playerId,
    name: player.firstName.default + ' ' + player.lastName.default,
    sweaterNumber: player.sweaterNumber || null,
    position: player.position,
    headshot: player.headshot,
    currentTeam: player.currentTeamId && player.currentTeamAbbrev && player.teamLogo ? {
        id: player.currentTeamId,
        abbrev: player.currentTeamAbbrev,
        logo: player.teamLogo,
        name: player.fullTeamName?.default,
    } : null,
    isActive: player.isActive,
    info: {
        height: player.heightInCentimeters,
        weight: player.weightInKilograms,
        shootsCatches: player.shootsCatches,
        birth: {
            date: player.birthDate,
            city: player.birthCity.default,
            province: player.birthStateProvince?.default || null,
            country: player.birthCountry,
        },
        draftDetails: player.draftDetails ? {
            year: player.draftDetails.year,
            teamAbbrev: player.draftDetails.teamAbbrev,
            round: player.draftDetails.round,
            pickInRound: player.draftDetails.pickInRound,
            overallPick: player.draftDetails.overallPick,
        } : null,
    },
    emblems: player.badges.length ? player.badges.map(({logoUrl, title}) => ({
        url: logoUrl.default,
        title: title.default,
    })) : null,
    heroImage: player.heroImage,
    lastSeasonStats: player.featuredStats ? {
        season: makeSeasonString(player.featuredStats.season),
        regular: player.featuredStats.regularSeason?.subSeason ? {
            gamesPlayed: player.featuredStats.regularSeason.subSeason.gamesPlayed,
            goals: player.featuredStats.regularSeason.subSeason.goals,
            assists: player.featuredStats.regularSeason.subSeason.assists,
            points: player.featuredStats.regularSeason.subSeason.points,
            plusMinus: player.featuredStats.regularSeason.subSeason.plusMinus,
            wins: player.featuredStats.regularSeason.subSeason.wins,
            shutouts: player.featuredStats.regularSeason.subSeason.shutouts,
            goalsAgainstAverage: makeRoundValue(player.featuredStats.regularSeason.subSeason.goalsAgainstAvg, 2),
            savePctg: makeSavePctg(player.featuredStats.regularSeason.subSeason.savePctg),
        } : null,
        playoff: player.featuredStats.playoffs?.subSeason ? {
            gamesPlayed: player.featuredStats.playoffs.subSeason.gamesPlayed,
            goals: player.featuredStats.playoffs.subSeason.goals,
            assists: player.featuredStats.playoffs.subSeason.assists,
            points: player.featuredStats.playoffs.subSeason.points,
            plusMinus: player.featuredStats.playoffs.subSeason.plusMinus,
            wins: player.featuredStats.playoffs.subSeason.wins,
            shutouts: player.featuredStats.playoffs.subSeason.shutouts,
            goalsAgainstAverage: makeRoundValue(player.featuredStats.playoffs.subSeason.goalsAgainstAvg, 2),
            savePctg: makeSavePctg(player.featuredStats.playoffs.subSeason.savePctg),
        } : null,
    } : null,
    careerStats: player.featuredStats ? {
        regular: player.featuredStats.regularSeason?.career ? {
            gamesPlayed: player.featuredStats.regularSeason.career.gamesPlayed,
            goals: player.featuredStats.regularSeason.career.goals,
            assists: player.featuredStats.regularSeason.career.assists,
            points: player.featuredStats.regularSeason.career.points,
            plusMinus: player.featuredStats.regularSeason.career.plusMinus,
            wins: player.featuredStats.regularSeason.career.wins,
            shutouts: player.featuredStats.regularSeason.career.shutouts,
            goalsAgainstAverage: makeRoundValue(player.featuredStats.regularSeason.career.goalsAgainstAvg, 2),
            savePctg: makeSavePctg(player.featuredStats.regularSeason.career.savePctg),
        } : null,
        playoff: player.featuredStats.playoffs?.career ? {
            gamesPlayed: player.featuredStats.playoffs.career.gamesPlayed,
            goals: player.featuredStats.playoffs.career.goals,
            assists: player.featuredStats.playoffs.career.assists,
            points: player.featuredStats.playoffs.career.points,
            plusMinus: player.featuredStats.playoffs.career.plusMinus,
            wins: player.featuredStats.playoffs.career.wins,
            shutouts: player.featuredStats.playoffs.career.shutouts,
            goalsAgainstAverage: makeRoundValue(player.featuredStats.playoffs.career.goalsAgainstAvg, 2),
            savePctg: makeSavePctg(player.featuredStats.playoffs.career?.savePctg),
        } : null,
    } : null,
    last5Games: player.last5Games ? player.last5Games.map((game) => ({
        gameDate: game.gameDate,
        opponentAbbrev: game.opponentAbbrev,
        goals: game.goals,
        assists: game.assists,
        points: game.points,
        plusMinus: makePlusMinus(game.plusMinus),
        powerPlayGoals: game.powerPlayGoals,
        shorthandedGoals: game.shorthandedGoals,
        shots: game.shots,
        shifts: game.shifts,
        toi: game.toi,
        gamesStarted: game.gamesStarted,
        decision: game.decision,
        shotsAgainst: game.shotsAgainst,
        goalsAgainst: game.goalsAgainst,
        savePctg: makeSavePctg(game.savePctg),
    })) : null,
    seasonTotal: player.seasonTotals ? player.seasonTotals.map((season) => ({
        gameTypeId: season.gameTypeId,
        season: makeSeasonString(season.season),
        leagueAbbrev: season.leagueAbbrev,
        teamName: season.teamName.default,
        gamesPlayed: season.gamesPlayed,
        goals: season.goals,
        assists: season.assists,
        points: season.points,
        plusMinus: makePlusMinus(season.plusMinus),
        pim: season.pim,
        powerPlayGoals: season.powerPlayGoals,
        powerPlayPoints: season.powerPlayPoints,
        shorthandedGoals: season.shorthandedGoals,
        shorthandedPoints: season.shorthandedPoints,
        avgToi: season.avgToi,
        gameWinningGoals: season.gameWinningGoals,
        otGoals: season.otGoals,
        shots: season.shots,
        shootingPctg: makeRoundValue(season.shootingPctg && season.shootingPctg * 100, 1),
        faceoffWinningPctg: makeRoundValue(season.faceoffWinningPctg && season.faceoffWinningPctg * 100, 1),
        gamesStarted: season.gamesStarted,
        wins: season.wins,
        losses: season.losses,
        otLosses: season.otLosses,
        shotsAgainst: season.shotsAgainst,
        goalsAgainstAvg: makeRoundValue(season.goalsAgainstAvg, 2),
        savePctg: makeSavePctg(season.savePctg),
        shutouts: season.shutouts,
        timeOnIce: season.timeOnIce,
    })) : null,
    awards: player.awards ? player.awards.map((award) => ({
        trophy: award.trophy.default,
        seasons: award.seasons.map((season) => ({
            assists: season.assists,
            blockedShots: season.blockedShots,
            gameTypeId: season.gameTypeId,
            gamesPlayed: season.gamesPlayed,
            goals: season.goals,
            hits: season.hits,
            pim: season.pim,
            plusMinus: makePlusMinus(season.plusMinus),
            points: season.points,
            season: makeSeasonString(season.seasonId),
            wins: season.wins,
            losses: season.losses,
            goalsAgainstAverage: makeRoundValue(season.gaa, 2),
            savePctg: makeSavePctg(season.savePctg),
        }))
    })) : null,
    currentTeamRoster: player.currentTeamRoster ? player.currentTeamRoster.map((player) => ({
        id: player.playerId,
        name: player.firstName.default + ' ' + player.lastName.default,
        playerSlug: player.playerSlug
    })) : null,
    description: d.items[0]?.fields.biography ? {
        title: d.items[0].tags[0].title,
        biography: d.items[0].fields.biography,
    } : null,
});